#!/usr/bin/env python
import re, sys, os, getopt
import gzip
import sys
import subprocess
import os
import argparse





def retrieve_depth(depthline,indexes):
	depths = depthline[2:]
	focaldepths = [depths[i] for i in indexes]
	return(focaldepths)

def filter_depth(focaldepths,cutoff,pct):
	tot = len(focaldepths)
	ct = 0
	for dp in focaldepths:
		if int(dp) < cutoff:
			ct = ct +1
	if (ct/tot) > pct:
		# Fails check
		res = 0
	else:
		# Passed check
		res = 1
	return(res)  

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("--bamdepth", help="input depth file as generated by samtools depth")
	#parser.add_argument("--sampleorder", help="single column file of sample names in the order they are presented in the samtools depth")
	parser.add_argument("--samplefocus", help="single column file of sample names that you want to query")
	parser.add_argument("--filterdepth", help="depth filter for which sites you are interested in")
	parser.add_argument("--proportion", help="proportion of focal samples with low depth above which you would like to write a mask. If 0, then a site with ANY samples below the depth filter will be retained and written in the mask. If 0.25, then a site with 25 percent or more samples below the depth filter will be written. ")
	parser.add_argument("--out", help="path to output file")
	

	# Parse arguments
	args = parser.parse_args()
	infile = args.bamdepth
	outfile = args.out
	pct = float(args.proportion)
	if not 0 <= pct <= 1:
		sys.exit('Proportion cutoff not between 0 and 1 you dumbass')
	cutoff = int(args.filterdepth)

	# Get sample indices
	if '.gz' in infile:
		data = gzip.open(infile,'rt')
	else:
		data = open(infile,'r')

	firstline = data.readline()
	if not '#CHROM' in firstline: sys.exit('Is header line missing from depth file?')
	info = firstline.strip('\n')
	info = info.split('\t')
	a, b , sampleorder = info[0],info[1],info [2:] 
	
	# Get samples of interest
	if args.samplefocus is None:
		samplefocus = dict(zip(sampleorder,range(len(sampleorder)))) 
	else:
		samplefocus = {}
		with open(args.samplefocus,'r') as samplecol:
			for line in samplecol:
				line = line.strip('\n')
				idx = sampleorder.index(line)
				samplefocus[line] = idx
		samplecol.close()


	# Run
	last_masked_position = None
	out = open(outfile, 'w', 1)
	IN_MASKED_REGION = False
	#masked_lines = []
	counter = 0
	for line in data:
		if '#CHROM' in line: continue
		counter = counter + 1
		line = line.strip('\n')
		line = line.split('\t')
		baseline = line[0:2]
		chrom, current_position = baseline
		current_position = int(current_position)
		
		# Is it the beginning of the file?
		if counter == 1:
			last_read_position = current_position

		# Is there a gap (e.g. assembly gap) since the last read base?
		if (current_position - last_read_position) > 1:
			print('Missing site in samtools depth file before %s:%s, is that intentional?' % (chrom,current_position), flush = True)
			if IN_MASKED_REGION:
				last_masked_position = current_position
				last_read_position = current_position
			else:
				out.write('%s\t%s\t%s\n' % (chrom, last_read_position + 1 - 1, current_position - 1))
				last_read_position = current_position
		else:
			last_read_position = current_position

		
		# Progress update
		if (counter % 100000 == 0): print('Processed %s lines, at %s:%s' % (counter, chrom, current_position), flush = True)
		depths = retrieve_depth(line,samplefocus.values())
		
		# 
		if filter_depth(depths,cutoff,pct) == 0:
			IN_MASKED_REGION = True

			# Has anything been masked yet?
			if not last_masked_position:
				last_masked_position = current_position
				start_masked_position = current_position

			# If the previous base was also masked, proceed as usual
			if current_position - last_masked_position <= 1:
				last_masked_position = current_position
				continue

			# If not, we need to write out a closed masking interval
			if ((current_position - last_masked_position) >= 2):
				out.write('%s\t%s\t%s\n' % (chrom,start_masked_position - 1, last_masked_position))
				last_masked_position = current_position
				start_masked_position = current_position
				continue
			else:
				sys.exit("Error at masked pos. %s. Last masked position was %s.\nThis situation should not be happening" % (pos,lastpos))
		else:
			IN_MASKED_REGION = False

	# Are we at the end of the file, and in a masked region?
	if IN_MASKED_REGION:
		out.write('%s\t%s\t%s\n' % (chrom, start_masked_position - 1, last_masked_position))

	out.close()
	data.close()
	print('All done', flush = True)

	
	#last_chrom = None
	#lastpos = 0
	#startpos = 1
	#intervals = []
	#out = open(outfile, 'w')
	#for line in masked_lines:
	#	chrom, pos = line[0:2]
	#	pos = int(pos)
	#	if pos - lastpos <= 1:
	#		lastpos = pos
	#		continue
	#	elif ((pos - lastpos) >= 2):
	#		if lastpos != 0:
	#			out.write('%s\t%s\t%s\n' % (chrom,startpos-1,lastpos))
	#			#intervals.append([chrom,startpos-1,lastpos])
	#			lastpos = pos
	#			startpos = pos
	#			continue
	#	else:
	#		sys.exit("Error at masked pos. %s. Last masked position was %s.\nThis situation should not be happening" % (pos,lastpos))
	## Handle cases at end of the chromosome
	#if ((pos - lastpos) <= 1):
	#	out.write('%s\t%s\t%s\n' % (chrom,startpos-1,lastpos))
	#	#intervals.append([chrom,startpos-1,lastpos])
#
	#out.close()
	#print('All done', flush = True)


if __name__ == "__main__":
	main()
